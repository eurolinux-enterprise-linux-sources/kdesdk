--- kdesdk-4.3.4/umbrello/umbrello/classifier.cpp.recursion	2009-05-27 21:53:58.000000000 +0200
+++ kdesdk-4.3.4/umbrello/umbrello/classifier.cpp	2013-06-06 11:02:44.072872628 +0200
@@ -44,6 +44,17 @@
 using namespace Uml;
 
 /**
+ * @brief holds set of classifiers for recursive loop detection
+ */
+class UMLClassifierSet: public QSet<UMLClassifier *> {
+public:
+    UMLClassifierSet() : level(0)
+    {
+    }
+    int level;
+};
+
+/**
  * Sets up a Classifier.
  *
  * @param name   The name of the Concept.
@@ -944,9 +955,10 @@
  * Return a list of operations for the Classifier.
  *
  * @param includeInherited   Includes operations from superclasses.
+ * @param alreadyTraversed   internal used object to avoid recursive loops
  * @return   The list of operations for the Classifier.
  */
-UMLOperationList UMLClassifier::getOpList(bool includeInherited)
+UMLOperationList UMLClassifier::getOpList(bool includeInherited, UMLClassifierSet *alreadyTraversed)
 {
     UMLOperationList ops;
     foreach (UMLObject* li, m_List) {
@@ -956,14 +968,24 @@
         }
     }
     if (includeInherited) {
+        if (!alreadyTraversed) {
+            alreadyTraversed = new UMLClassifierSet;
+        }
+        else
+            alreadyTraversed->level++;
+
+        if (!alreadyTraversed->contains(this))
+            *alreadyTraversed << this;
+
+        // get a list of parents of this class
         UMLClassifierList parents = findSuperClassConcepts();
-        foreach (UMLClassifier* c ,  parents) {
-            if (c == this) {
-                uError() << "class " << c->getName() << " is parent of itself ?!?";
+        foreach(UMLClassifier *c, parents) {
+            if (alreadyTraversed->contains(c)) {
+                uError() << "class " << c->getName() << " is starting a dependency loop!";
                 continue;
             }
             // get operations for each parent by recursive call
-            UMLOperationList pops = c->getOpList(true);
+            UMLOperationList pops = c->getOpList(true, alreadyTraversed);
             // add these operations to operation list, but only if unique.
             foreach (UMLOperation *po , pops ) {
                 QString po_as_string(po->toString(Uml::st_SigNoVis));
@@ -977,6 +999,12 @@
                 if (breakFlag == false)
                     ops.append(po);
             }
+            // remember this node
+            *alreadyTraversed << c;
+        }
+        if (alreadyTraversed->level-- == 0) {
+            delete alreadyTraversed;
+            alreadyTraversed = 0;
         }
     }
     return ops;
--- kdesdk-4.3.4/umbrello/umbrello/classifier.h.recursion	2013-06-06 11:02:36.913891437 +0200
+++ kdesdk-4.3.4/umbrello/umbrello/classifier.h	2013-06-06 11:02:40.034883237 +0200
@@ -21,6 +21,7 @@
 // forward declarations
 class UMLAssociation;
 class IDChangeLog;
+class UMLClassifierSet;
 
 /**
  * This class defines the non-graphical information required for a
@@ -89,7 +90,7 @@
 
     int operations() ;
 
-    UMLOperationList getOpList(bool includeInherited = false);
+    UMLOperationList getOpList(bool includeInherited = false, UMLClassifierSet *alreadyTraversed = 0);
 
     UMLObject* createTemplate(const QString& name = QString());
 
